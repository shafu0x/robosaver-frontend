enum ParameterType {
  None
  Static
  Dynamic
  Tuple
  Array
  Calldata
  AbiEncoded
}

enum Operator {
  # 00:    EMPTY EXPRESSION (default, always passes)
  #          paramType: Static / Dynamic / Tuple / Array
  #          üö´ children
  #          üö´ compValue
  Pass # 0
  # ------------------------------------------------------------
  # 01-04: BOOLEAN EXPRESSIONS
  #          paramType: None
  #          ‚úÖ children
  #          üö´ compValue
  And # 1
  Or # 2
  Nor # 3
  _Placeholder04 # 4
  # ------------------------------------------------------------
  # 05-14: COMPLEX EXPRESSIONS
  #          paramType: Calldata / AbiEncoded / Tuple / Array,
  #          ‚úÖ children
  #          üö´ compValue
  Matches # 5
  ArraySome # 6
  ArrayEvery # 7
  ArraySubset # 8
  _Placeholder09
  _Placeholder10
  _Placeholder11
  _Placeholder12
  _Placeholder13
  _Placeholder14
  # ------------------------------------------------------------
  # 15:    SPECIAL COMPARISON (without compValue)
  #          paramType: Static
  #          üö´ children
  #          üö´ compValue
  EqualToAvatar # 15
  # ------------------------------------------------------------
  # 16-31: COMPARISON EXPRESSIONS
  #          paramType: Static / Dynamic / Tuple / Array
  #          ‚ùì children (only for paramType: Tuple / Array to describe their structure)
  #          ‚úÖ compValue
  EqualTo # 16
  GreaterThan # 17
  LessThan # 18
  SignedIntGreaterThan # 19
  SignedIntLessThan # 20
  Bitmask # 21
  Custom # 22
  _Placeholder23
  _Placeholder24
  _Placeholder25
  _Placeholder26
  _Placeholder27
  WithinAllowance # 28
  EtherWithinAllowance # 29
  CallWithinAllowance # 30
  _Placeholder31
}

enum ExecutionOptions {
  None
  Send
  DelegateCall
  Both
}

enum Clearance {
  None
  Target
  Function
}

type Role @entity {
  id: ID! # Global unique id for role in subgraph
  key: Bytes! # Unique within the Roles modifier instance (bytes32)
  rolesModifier: RolesModifier!
  targets: [Target!]! @derivedFrom(field: "role")
  members: [RoleAssignment!]! @derivedFrom(field: "role")
  annotations: [Annotation!]! @derivedFrom(field: "role")
}

type Target @entity {
  id: ID!
  role: Role!
  address: Bytes!
  clearance: Clearance!
  executionOptions: ExecutionOptions!
  functions: [Function!]! @derivedFrom(field: "target")
}

type Function @entity {
  id: ID!
  target: Target!
  selector: Bytes!
  executionOptions: ExecutionOptions!
  wildcarded: Boolean!
  condition: Condition
}

type Condition @entity(immutable: true) {
  id: ID! # Derived from hash of the condition, matches the storage address
  json: String! # JSON representation of the condition
}

type Member @entity {
  id: ID!
  address: Bytes!
  enabledAsModule: Boolean!
  roles: [RoleAssignment!]! @derivedFrom(field: "member")
}

type RoleAssignment @entity {
  id: ID!
  member: Member!
  role: Role!
}

type RolesModifier @entity {
  id: ID!
  address: Bytes!
  owner: Bytes!
  avatar: Bytes!
  target: Bytes!
  roles: [Role!]! @derivedFrom(field: "rolesModifier")
}

type Allowance @entity {
  id: ID! # Global unique id
  key: Bytes! # Unique within the Roles modifier instance (bytes32)
  rolesModifier: RolesModifier!
  period: Int! # duration of the period in seconds, 0 for one-time allowance
  refill: BigInt! # amount that will be replenished "at the start of every period" (replace with: per period)
  timestamp: Int! # timestamp of the last interval refilled for;
  maxRefill: BigInt! # max accrual amount, replenishing stops once the unused allowance hits this value
  balance: BigInt! # unused allowance;
}

type UnwrapAdapter @entity {
  id: ID!
  rolesModifier: RolesModifier!
  targetAddress: Bytes!
  selector: Bytes!
  adapterAddress: Bytes!
}

type Annotation @entity {
  id: ID!
  role: Role!
  uri: String! # URL to a REST endpoint providing the permissions to annotate
  schema: String! # URL to the OpenAPI schema describing the `url` REST endpoint
}
